[gd_resource type="VisualShader" load_steps=23 format=2]

[sub_resource type="VisualShaderNodeColorUniform" id=20]
uniform_name = "albedo"

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=1]
default_input_values = [ 0, 1.0, 1, 0.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeTransformVecMult" id=2]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=3]
function = 31

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=5]

[sub_resource type="VisualShaderNodeVectorOp" id=6]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=8]

[sub_resource type="VisualShaderNodeVectorOp" id=9]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "world"

[sub_resource type="VisualShaderNodeVec3Uniform" id=11]
uniform_name = "player_pos"

[sub_resource type="VisualShaderNodeScalarUniform" id=12]
uniform_name = "radius"

[sub_resource type="VisualShaderNodeScalarUniform" id=21]
uniform_name = "power"

[sub_resource type="VisualShaderNodeVectorOp" id=22]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "world"

[sub_resource type="VisualShaderNodeTransformVecMult" id=14]

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=16]
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=17]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 0, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id=18]

[sub_resource type="VisualShaderNodeVectorDistance" id=19]

[resource]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx;

uniform vec3 player_pos;
uniform float radius;
uniform float power;
uniform vec4 albedo : hint_color;



void vertex() {
// Input:16
	vec3 n_out16p0 = VERTEX;

// Input:19
	mat4 n_out19p0 = WORLD_MATRIX;

// Input:3
	mat4 n_out3p0 = WORLD_MATRIX;

// Input:5
	vec3 n_out5p0 = VERTEX;

// TransformVectorMult:4
	vec3 n_out4p0 = (n_out3p0 * vec4(n_out5p0, 1.0)).xyz;

// VectorUniform:2
	vec3 n_out2p0 = player_pos;

// VectorOp:6
	vec3 n_out6p0 = n_out4p0 - n_out2p0;

// VectorOp:7
	vec3 n_in7p1 = vec3(1.00000, 0.00000, 1.00000);
	vec3 n_out7p0 = n_out6p0 * n_in7p1;

// VectorFunc:8
	vec3 n_out8p0 = normalize(n_out7p0);

// TransformVectorMult:11
	vec3 n_out11p0 = (vec4(n_out8p0, 1.0) * n_out19p0).xyz;

// Input:13
	vec3 n_out13p0 = vec3(UV, 0.0);

// VectorDecompose:14
	float n_out14p0 = n_out13p0.x;
	float n_out14p1 = n_out13p0.y;
	float n_out14p2 = n_out13p0.z;

// ScalarFunc:12
	float n_out12p0 = 1.0 - n_out14p1;

// VectorOp:15
	vec3 n_out15p0 = n_out11p0 * vec3(n_out12p0);

// ScalarUniform:20
	float n_out20p0 = radius;

// Distance:9
	float n_out9p0 = distance(n_out2p0, n_out4p0);

// ScalarSmoothStep:10
	float n_in10p1 = 0.00000;
	float n_out10p0 = smoothstep(n_out20p0, n_in10p1, n_out9p0);

// VectorOp:18
	vec3 n_out18p0 = n_out15p0 * vec3(n_out10p0);

// ScalarUniform:21
	float n_out21p0 = power;

// VectorOp:22
	vec3 n_out22p0 = n_out18p0 * vec3(n_out21p0);

// VectorOp:17
	vec3 n_out17p0 = n_out16p0 + n_out22p0;

// Output:0
	VERTEX = n_out17p0;

}

void fragment() {
// ColorUniform:2
	vec3 n_out2p0 = albedo.rgb;
	float n_out2p1 = albedo.a;

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -134, -58 )
modes/cull = 2
nodes/vertex/0/position = Vector2( 1580, 500 )
nodes/vertex/2/node = SubResource( 11 )
nodes/vertex/2/position = Vector2( 160, 460 )
nodes/vertex/3/node = SubResource( 13 )
nodes/vertex/3/position = Vector2( 60, 220 )
nodes/vertex/4/node = SubResource( 14 )
nodes/vertex/4/position = Vector2( 280, 200 )
nodes/vertex/5/node = SubResource( 15 )
nodes/vertex/5/position = Vector2( 60, 300 )
nodes/vertex/6/node = SubResource( 16 )
nodes/vertex/6/position = Vector2( 540, 280 )
nodes/vertex/7/node = SubResource( 17 )
nodes/vertex/7/position = Vector2( 540, 400 )
nodes/vertex/8/node = SubResource( 18 )
nodes/vertex/8/position = Vector2( 540, 520 )
nodes/vertex/9/node = SubResource( 19 )
nodes/vertex/9/position = Vector2( 540, 600 )
nodes/vertex/10/node = SubResource( 1 )
nodes/vertex/10/position = Vector2( 540, 700 )
nodes/vertex/11/node = SubResource( 2 )
nodes/vertex/11/position = Vector2( 780, 580 )
nodes/vertex/12/node = SubResource( 3 )
nodes/vertex/12/position = Vector2( 800, 840 )
nodes/vertex/13/node = SubResource( 4 )
nodes/vertex/13/position = Vector2( 400, 840 )
nodes/vertex/14/node = SubResource( 5 )
nodes/vertex/14/position = Vector2( 540, 840 )
nodes/vertex/15/node = SubResource( 6 )
nodes/vertex/15/position = Vector2( 1020, 580 )
nodes/vertex/16/node = SubResource( 7 )
nodes/vertex/16/position = Vector2( 1033, 459 )
nodes/vertex/17/node = SubResource( 8 )
nodes/vertex/17/position = Vector2( 1360, 540 )
nodes/vertex/18/node = SubResource( 9 )
nodes/vertex/18/position = Vector2( 1220, 680 )
nodes/vertex/19/node = SubResource( 10 )
nodes/vertex/19/position = Vector2( 780, 500 )
nodes/vertex/20/node = SubResource( 12 )
nodes/vertex/20/position = Vector2( 260, 700 )
nodes/vertex/21/node = SubResource( 21 )
nodes/vertex/21/position = Vector2( 1220, 800 )
nodes/vertex/22/node = SubResource( 22 )
nodes/vertex/22/position = Vector2( 1420, 720 )
nodes/vertex/connections = PoolIntArray( 3, 0, 4, 0, 5, 0, 4, 1, 4, 0, 6, 0, 2, 0, 6, 1, 6, 0, 7, 0, 7, 0, 8, 0, 2, 0, 9, 0, 4, 0, 9, 1, 9, 0, 10, 2, 8, 0, 11, 1, 13, 0, 14, 0, 14, 1, 12, 0, 12, 0, 15, 1, 11, 0, 15, 0, 16, 0, 17, 0, 17, 0, 0, 0, 10, 0, 18, 1, 15, 0, 18, 0, 19, 0, 11, 0, 20, 0, 10, 0, 18, 0, 22, 0, 21, 0, 22, 1, 22, 0, 17, 1 )
nodes/fragment/0/position = Vector2( 460, 80 )
nodes/fragment/2/node = SubResource( 20 )
nodes/fragment/2/position = Vector2( 220, 60 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )
